import logging
import re
import json
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CallbackContext, CommandHandler, CallbackQueryHandler
import requests

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
recipes = []

# –≠–º–æ–¥–∑–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORY_EMOJIS = {
    "–°–∞–ª–∞—Ç—ã": "ü•ó",
    "–°—É–ø—ã": "üç≤",
    "–î–µ—Å–µ—Ä—Ç—ã": "üç∞",
    "–û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞": "üçΩ",
    "–ó–∞–∫—É—Å–∫–∏": "ü•™",
    "–ù–∞–ø–∏—Ç–∫–∏": "ü•§",
}

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
def load_recipes():
    try:
        with open('recipes.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        logging.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ recipes.json")
        return []

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞
def format_recipe(recipe):
    recipe_text = f"üçΩ **{recipe['title']}**\n\n"
    recipe_text += "üìù **–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:**\n"
    for ingredient in recipe.get('ingredients', []):
        amount = ingredient.get('amount', '')
        recipe_text += f"üî∏ {ingredient['ingredient']:20} {amount}\n"
    recipe_text += "\nüßë‚Äçüç≥ **–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:**\n"
    for i, step in enumerate(recipe.get('instructions', []), start=1):
        recipe_text += f"{i}. {step}\n"
    return recipe_text

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
def get_categories():
    return sorted(set(recipe.get('category') for recipe in recipes))

# –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤
def search_recipes(query):
    return [recipe for recipe in recipes if query.lower() in recipe['title'].lower()]

# –§—É–Ω–∫—Ü–∏—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–µ–Ω—é
def create_weekly_menu():
    selected_recipes = random.sample(recipes, 7)
    menu = "\n".join([f"{i + 1}. {recipe['title']}" for i, recipe in enumerate(selected_recipes)])
    return f"üìÖ **–í–∞—à–µ –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é:**\n{menu}"

# –ö–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context: CallbackContext):
    global recipes
    recipes = load_recipes()
    if not recipes:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    categories = get_categories()
    keyboard = [
        [InlineKeyboardButton(f"{CATEGORY_EMOJIS.get(category, 'üç¥')} {category}", callback_data=f'category_{category}')]
        for category in categories
    ]
    keyboard.append([InlineKeyboardButton("üìÖ –°–æ—Å—Ç–∞–≤–∏—Ç—å –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é", callback_data='weekly_menu')])
    keyboard.append([InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤", callback_data='search')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–µ—Ü–µ–ø—Ç–æ–≤:', reply_markup=reply_markup)

async def category_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    category = query.data.split('_')[1]

    recipes_in_category = [recipe for recipe in recipes if recipe['category'] == category]
    if not recipes_in_category:
        await query.message.reply_text("–ù–µ—Ç —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return

    keyboard = [[InlineKeyboardButton(recipe['title'], callback_data=f'recipe_{recipes.index(recipe)}')] for recipe in recipes_in_category]
    keyboard.append([InlineKeyboardButton("üè† –î–æ–º–æ–π", callback_data='home')])
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(f"–†–µ—Ü–µ–ø—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {category}", reply_markup=reply_markup)

async def recipe_button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    recipe_index = int(query.data.split('_')[1])
    recipe = recipes[recipe_index]
    recipe_text = format_recipe(recipe)

    keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f'category_{recipe["category"]}')],
        [InlineKeyboardButton("üè† –î–æ–º–æ–π", callback_data='home')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.edit_text(recipe_text, reply_markup=reply_markup)

async def weekly_menu(update: Update, context: CallbackContext):
    menu = create_weekly_menu()
    await update.callback_query.message.reply_text(menu)

async def search_handler(update: Update, context: CallbackContext):
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    return 'SEARCH'

async def handle_search(update: Update, context: CallbackContext):
    query = update.message.text
    results = search_recipes(query)
    if not results:
        await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    keyboard = [[InlineKeyboardButton(recipe['title'], callback_data=f'recipe_{recipes.index(recipe)}')] for recipe in results]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:", reply_markup=reply_markup)

async def main():
    global recipes
    recipes = load_recipes()
    
    app = ApplicationBuilder().token("6953692387:AAEm-p8VtfqdmkHtbs8hxZWS-XNkdRN2lRE").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(category_button, pattern=r'category_'))
    app.add_handler(CallbackQueryHandler(recipe_button, pattern=r'recipe_'))
    app.add_handler(CallbackQueryHandler(weekly_menu, pattern=r'weekly_menu'))
    app.add_handler(CallbackQueryHandler(search_handler, pattern=r'search'))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_search))

    await app.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())
